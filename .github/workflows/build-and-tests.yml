# Copyright (C) 2023 Andrea Ballestrazzi

name: Builds and Tests

on:
  push:
    branches-ignore:
      - main

env:
  BUILD_TYPE: Release

jobs:
  clang-tidy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup clang-tidy
        run: sudo apt-get install -y clang clang-tidy autoconf-archive pkg-config m4 libtool automake autoconf

      - name: Compile commands export
        env:
          CC:   clang
          CXX:  clang++
        run: |
          mkdir build
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -Wno-dev

      - name: Execute clang-tidy on production code
        run: |
          chmod +x ./scripts/static-analyze-files.sh
          ./scripts/static-analyze-files.sh $(git diff --name-only origin/main | grep "src/")

  build-matrix:
    needs: clang-tidy
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: (RPI_GC) Check changed files
      id: RPI_GC-changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: |
          src/**
          test/**

    - name: Package configuration
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true' && matrix.os == 'ubuntu-latest'
      run: sudo apt-get install autoconf-archive pkg-config m4 libtool automake autoconf

    - name: CMake Configure
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true'
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Wno-dev
      env:
        CC:   gcc-12
        CXX:  g++-12

    - name: CMake Build
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true'
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Static Tests Run
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true'
      run: ${{github.workspace}}/bin/test_app --order rand [static]

    - name: Unit Tests Run
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true' && matrix.os != 'macos-latest'
      run: ${{github.workspace}}/bin/test_app --order rand [unit]

    - name: Integration Tests Run
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true'
      run: ${{github.workspace}}/bin/test_app --order rand [integration]

    - name: Functional Tests Run
      if: steps.RPI_GC-changed-files.outputs.any_changed == 'true' && matrix.os != 'macos-latest'
      run: ${{github.workspace}}/bin/test_app --order rand [functional]

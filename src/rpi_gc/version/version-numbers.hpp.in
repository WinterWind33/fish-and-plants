// Copyright (c) 2023 Andrea Ballestrazzi
#pragma once

// Third-party
#include <semver.hpp>

// C++ STL
#include <cstdint>
#include <optional>

namespace rpi_gc::version {
    namespace details{
        constexpr std::uint16_t RPI_GC_VERSION_MAJOR{${RPI_GC_VERSION_MAJOR}};
        constexpr std::uint16_t RPI_GC_VERSION_MINOR{${RPI_GC_VERSION_MINOR}};
        constexpr std::uint16_t RPI_GC_VERSION_PATCH{${RPI_GC_VERSION_PATCH}};

        namespace prerelease {
            constexpr std::optional<std::uint16_t> RPI_GC_VERSION_RC_NUM{${RPI_GC_VERSION_RC_NUM}};
        } // namespace prerelease
    } // namespace details

    //!!
    //! \brief Retrieve rpi_gc application version.
    //!
    //! \return The version of the application.
    constexpr semver::version getApplicationVersion() noexcept {
        if constexpr (details::prerelease::RPI_GC_VERSION_RC_NUM.has_value()) {
            return semver::version{
                details::RPI_GC_VERSION_MAJOR,
                details::RPI_GC_VERSION_MINOR,
                details::RPI_GC_VERSION_PATCH,
                semver::prerelease::rc,
                details::prerelease::RPI_GC_VERSION_RC_NUM};
        } else {
            return semver::version{
                details::RPI_GC_VERSION_MAJOR,
                details::RPI_GC_VERSION_MINOR,
                details::RPI_GC_VERSION_PATCH};
        }
    }

} // namespace rpi_gc::version
